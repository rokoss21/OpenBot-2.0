#main.py
# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import logging
import requests
import time
import json
from datetime import datetime
from telegram import Update, ChatAction
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from config import TELEGRAM_BOT_TOKEN, AVAILABLE_MODELS
from log_config import setup_logging
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ SessionLocal –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π –∏ Session –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
from db import (get_user_by_telegram_id, create_or_update_user, update_user_api_key, update_user_model,
                add_message, get_user_messages, delete_user_messages, SessionLocal)
from openrouter import send_to_openrouter
from models import User
from sqlalchemy.orm import Session  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤




# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

def send_typing_action(chat_id, context):
    context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    time.sleep(1)

def start(update: Update, context: CallbackContext) -> None:
    welcome_message = """
    ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter.
    –î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç OpenRouter –∫–æ–º–∞–Ω–¥–æ–π /api <API_KEY>.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ò–ò.
    """
    update.message.reply_text(welcome_message)

def validate_api_key(api_key: str, user_id: int, session: Session) -> bool:
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –≤–∞—à–µ–≥–æ API
    data = {
        "model": "openai/gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        "messages": [{"role": "user", "content": "Hello"}]  # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥, –æ–±—ã—á–Ω–æ 200 –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        is_valid = response.status_code == 200

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.is_valid = is_valid
            session.commit()

        if is_valid:
            logger.info(f"API key for user {user_id} is valid.")
        else:
            logger.info(f"API key validation failed for user {user_id} with status code {response.status_code}: {response.text}")

        return is_valid
    except Exception as e:
        logger.error(f"Error validating API key for user {user_id}: {e}")
        return False



def api(update: Update, context: CallbackContext) -> None:
    send_typing_action(update.message.chat_id, context)
    api_key = ' '.join(context.args)
    if not api_key:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API –∫–ª—é—á –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /api.')
        return

    user_id = update.effective_user.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SessionLocal –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    with SessionLocal() as session:
        if validate_api_key(api_key, user_id, session):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
            user = create_or_update_user(user_id, api_key, session)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            context.user_data['api_key_valid'] = True
            update.message.reply_text('API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /model.')
        else:
            update.message.reply_text('API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π /api.')
        # –°–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –±–ª–æ–∫–∞ with





def restricted_access(func):
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        with SessionLocal() as session:  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ context manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
            db_user = get_user_by_telegram_id(user_id, session)  # –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
            if db_user and db_user.api_key and db_user.is_valid:
                return func(update, context, *args, **kwargs)
            else:
                update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π /api.')
                return
    return wrapper




@restricted_access
def help_command(update: Update, context: CallbackContext) -> None:
    send_typing_action(update.message.chat_id, context)
    help_text = """
    ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter.

    –ö–æ–º–∞–Ω–¥—ã:
    /start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.
    /api <API_KEY> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à API –∫–ª—é—á.
    /model - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –¥–∏–∞–ª–æ–≥–∞.
    /new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –æ—á–∏—Å—Ç–∏–≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.
    /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.
    """
    update.message.reply_text(help_text)

@restricted_access
def model(update: Update, context: CallbackContext) -> None:
    send_typing_action(update.message.chat_id, context)
    user_id = update.effective_user.id
    
    with SessionLocal() as session:  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        db_user = get_user_by_telegram_id(user_id, session)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        if db_user and db_user.model_id:
            current_model_info = f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {db_user.model_id}, —Ç–æ–∫–µ–Ω—ã: {db_user.max_tokens if db_user.max_tokens else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}."
            update.message.reply_text(current_model_info)
            
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—ë –Ω–æ–º–µ—Ä:\n\n"
        for key, value in AVAILABLE_MODELS.items():
            message += f"{key}: {value['name']}\n"
        update.message.reply_text(message)
        context.user_data['awaiting_model_choice'] = True


@restricted_access
def new_session(update: Update, context: CallbackContext) -> None:
    send_typing_action(update.message.chat_id, context)
    user_id = update.effective_user.id
    context.user_data.clear()

    with SessionLocal() as session:  # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        delete_user_messages(user_id, session)  # –ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ—Å—Å–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∞

    update.message.reply_text('–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞. –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.')


@restricted_access
def handle_message(update: Update, context: CallbackContext) -> None:
    send_typing_action(update.message.chat_id, context)
    user_id = update.effective_user.id
    
    with SessionLocal() as session:  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        db_user = get_user_by_telegram_id(user_id, session)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        
        if 'awaiting_model_choice' in context.user_data and context.user_data['awaiting_model_choice']:
            try:
                choice = int(update.message.text)
                if choice in AVAILABLE_MODELS:
                    chosen_model = AVAILABLE_MODELS[choice]
                    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è update_user_model –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                    update_user_model(user_id, chosen_model['name'], chosen_model.get('max_tokens', 1024), session)
                    update.message.reply_text(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {chosen_model['name']} —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤ {chosen_model.get('max_tokens', 1024)}.")
                    context.user_data['awaiting_model_choice'] = False
                else:
                    update.message.reply_text("–í—ã–±—Ä–∞–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /model.")
            except ValueError:
                update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /model.")
        else:
            if db_user and db_user.api_key and db_user.model_id:
                message_history = [msg.text for msg in get_user_messages(user_id, session)]  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                response_message = send_to_openrouter(update.message.text, db_user.api_key, db_user.model_id, max_tokens=db_user.max_tokens, message_history=message_history)
                add_message(user_id, update.message.text, datetime.now(), 'in', session)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                add_message(user_id, response_message, datetime.now(), 'out', session)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                update.message.reply_text(response_message)
            else:
                update.message.reply_text("–ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /model.")




def main():
    updater = Updater(TELEGRAM_BOT_TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("api", api, pass_args=True))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("model", model))
    dispatcher.add_handler(CommandHandler("new", new_session))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
